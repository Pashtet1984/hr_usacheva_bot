from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher import Dispatcher
import pandas as pd
import os

from main import bot, ADMIN_ID

EXCEL_FILE = "applications.xlsx"

class ApplicationForm(StatesGroup):
    name = State()
    position = State()
    company = State()
    email = State()
    phone = State()
    comment = State()

def save_application(data):
    df_new = pd.DataFrame([data])
    if os.path.exists(EXCEL_FILE):
        df = pd.read_excel(EXCEL_FILE)
        df = pd.concat([df, df_new], ignore_index=True)
    else:
        df = df_new
    df.to_excel(EXCEL_FILE, index=False)

def register_application_handlers(dp: Dispatcher):

    @dp.message_handler(Text(equals="üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", ignore_case=True), state="*")
    async def start_application(message: types.Message):
        await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await ApplicationForm.name.set()

    @dp.message_handler(state=ApplicationForm.name)
    async def process_name(message: types.Message, state: FSMContext):
        await state.update_data(name=message.text)
        await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
        await ApplicationForm.position.set()

    @dp.message_handler(state=ApplicationForm.position)
    async def process_position(message: types.Message, state: FSMContext):
        await state.update_data(position=message.text)
        await message.answer("üè≠ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
        await ApplicationForm.company.set()

    @dp.message_handler(state=ApplicationForm.company)
    async def process_company(message: types.Message, state: FSMContext):
        await state.update_data(company=message.text)
        await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
        await ApplicationForm.email.set()

    @dp.message_handler(state=ApplicationForm.email)
    async def process_email(message: types.Message, state: FSMContext):
        await state.update_data(email=message.text)
        await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
        await ApplicationForm.phone.set()

    @dp.message_handler(state=ApplicationForm.phone)
    async def process_phone(message: types.Message, state: FSMContext):
        await state.update_data(phone=message.text)
        await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´-¬ª):")
        await ApplicationForm.comment.set()

    @dp.message_handler(state=ApplicationForm.comment)
    async def process_comment(message: types.Message, state: FSMContext):
        data = await state.get_data()
        data["comment"] = message.text if message.text != "-" else ""

        save_application(data)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
        text = (
            f"üì• *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:*\n"
            f"üë§ –ò–º—è: {data['name']}\n"
            f"üè¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['position']}\n"
            f"üè≠ –ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
            f"üìß Email: {data['email']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment'] or '‚Äî'}"
        )

        buttons = InlineKeyboardMarkup()
        buttons.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="approve"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline")
        )

        await bot.send_message(chat_id=int(ADMIN_ID), text=text, reply_markup=buttons, parse_mode="Markdown")

        await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
        await state.finish()

    @dp.callback_query_handler(Text(equals=["approve", "decline"]))
    async def process_admin_decision(call: types.CallbackQuery):
        action = "‚úÖ –ü—Ä–∏–Ω—è—Ç–∞" if call.data == "approve" else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞"
        await call.message.edit_reply_markup()
        await call.message.reply(f"–ó–∞—è–≤–∫–∞ {action}.")
        await call.answer("–ì–æ—Ç–æ–≤–æ")

