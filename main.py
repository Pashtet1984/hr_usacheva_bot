import os
import logging
import pandas as pd
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

API_TOKEN = os.getenv("TELEGRAM_API_TOKEN")
ADMIN_ID = os.getenv("ADMIN_ID")

if not API_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: TELEGRAM_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
if not ADMIN_ID:
    raise ValueError("–û—à–∏–±–∫–∞: ADMIN_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

EXCEL_FILE = "applications.xlsx"

class ApplicationForm(StatesGroup):
    name = State()
    position = State()
    company = State()
    email = State()
    phone = State()
    comment = State()

def save_application(data):
    df_new = pd.DataFrame([data])
    if os.path.exists(EXCEL_FILE):
        df = pd.read_excel(EXCEL_FILE)
        df = pd.concat([df, df_new], ignore_index=True)
    else:
        df = df_new
    df.to_excel(EXCEL_FILE, index=False)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("‚ÑπÔ∏è –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", "üìò –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", "üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
    await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –Ω–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞ HRUsacheva!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é.", reply_markup=keyboard)

@dp.message_handler(Text(equals="‚ÑπÔ∏è –ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", ignore_case=True))
async def send_portfolio(message: types.Message):
    text = (
        "üë§ *–û–∫—Å–∞–Ω–∞ –£—Å–∞—á—ë–≤–∞* ‚Äî —ç–∫—Å–ø–µ—Ä—Ç ‚Ññ1 –≤ –†–æ—Å—Å–∏–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –∞–∫—Ç–∏–≤–∞.\n"
        "25 –ª–µ—Ç –æ–ø—ã—Ç–∞ –≤ –Ω–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –§–û–¢, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏.\n"
        "–†–∞–±–æ—Ç–∞–ª–∞ –≤ –ø–∏—â–µ–≤–∫–µ, –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏–∏, –≥–æ—Å—Å–µ–∫—Ç–æ—Ä–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ."
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message_handler(Text(equals="üìò –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–æ", ignore_case=True))
async def send_nastavnichestvo(message: types.Message):
    text = (
        "üéì *–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ù–∞—Å—Ç–∞–≤–Ω–∏—á–µ—Å—Ç–≤–∞ –ø–æ –ù–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—é –¢—Ä—É–¥–∞ 2025*\n"
        "\n"
        "–ê–≤—Ç–æ—Ä –∏ –≤–µ–¥—É—â–∞—è ‚Äî –û–∫—Å–∞–Ω–∞ –£—Å–∞—á—ë–≤–∞.\n"
        "\n"
        "üìò *–§–æ—Ä–º–∞—Ç:*\n"
        "‚Ä¢ 6+1 –æ–Ω–ª–∞–π–Ω-—Å–µ—Å—Å–∏–π –ø–æ 2 —á–∞—Å–∞\n"
        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∞—É–¥–∏—Ç\n"
        "‚Ä¢ Excel-–º–æ–¥–µ–ª–∏, —à–∞–±–ª–æ–Ω—ã, BI-–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ Telegram-–≥—Ä—É–ø–ø–µ\n"
        "\n"
        "üìÖ *–¢–µ–º—ã:*\n"
        "1. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: –Ω–æ—Ä–º—ã, —Ö—Ä–æ–Ω–æ–º–µ—Ç—Ä–∞–∂, Lean\n"
        "2. –û—Ñ–∏—Å: FTE, workload, –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç\n"
        "3. –ê–£–ü: —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å, ZBHP, —Ñ—É–Ω–∫—Ü–∏–∏\n"
        "4. –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã: KPI, Power BI, ABC/XYZ\n"
        "5. –ê—É–¥–∏—Ç —á–∏—Å–ª–µ–Ω–Ω–æ—Å—Ç–∏ + –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å\n"
        "6. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥ –∫–ª—é—á\n"
        "\n"
        "üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:* 75 000 ‚ÇΩ\n"
        "üìÜ –°—Ç–∞—Ä—Ç: 1 –∏—é–ª—è 2025\n"
        "\n"
        "üéÅ *–ë–æ–Ω—É—Å:*\n"
        "–ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –∏ –æ–±–∑–æ—Ä –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è HR\n"
    )
    await message.answer(text, parse_mode="Markdown")

@dp.message_handler(Text(equals="üìã –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", ignore_case=True), state="*")
async def start_application(message: types.Message):
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await ApplicationForm.name.set()

@dp.message_handler(state=ApplicationForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üè¢ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å:")
    await ApplicationForm.position.set()

@dp.message_handler(state=ApplicationForm.position)
async def process_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await message.answer("üè≠ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:")
    await ApplicationForm.company.set()

@dp.message_handler(state=ApplicationForm.company)
async def process_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    await message.answer("üìß –í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await ApplicationForm.email.set()

@dp.message_handler(state=ApplicationForm.email)
async def process_email(message: types.Message, state: FSMContext):
    await state.update_data(email=message.text)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:")
    await ApplicationForm.phone.set()

@dp.message_handler(state=ApplicationForm.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ ¬´-¬ª):")
    await ApplicationForm.comment.set()

@dp.message_handler(state=ApplicationForm.comment)
async def process_comment(message: types.Message, state: FSMContext):
    data = await state.get_data()
    data["comment"] = message.text if message.text != "-" else ""

    save_application(data)

    admin_text = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç {data['name']}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['position']}\n"
        f"–ö–æ–º–ø–∞–Ω–∏—è: {data['company']}\n"
        f"Email: {data['email']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data['comment']}"
    )
    try:
        await bot.send_message(chat_id=int(ADMIN_ID), text=admin_text)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

    await message.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)


